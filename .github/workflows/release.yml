name: Release

on:
    workflow_dispatch:
        inputs:
            force:
                description: Force build & release?
                required: false
                type: boolean

permissions:
    contents: write

jobs:
    release:
        runs-on: ubuntu-latest
        env:
            X_APP_VERSION: ""
            X_TAG_NAME: ""
            X_TAG_EXISTS: ""
            X_REQUIRES_BUILD: ""
            X_ALLOW_UPDATES: ""

        steps:
            - uses: actions/checkout@v4

            - name: 🚧 Prerequistes
              run: |
                  sudo apt-get update
                  sudo apt-get install desktop-file-utils

            - name: 🔢 Get version
              run: |
                  version=$(./version.sh | xargs)
                  echo "X_APP_VERSION=${version}" >> $GITHUB_ENV
                  echo "X_TAG_NAME=v${version}" >> $GITHUB_ENV

            - name: ♻️ Check for builds
              run: |
                  tag_exists=$(./tag-exists.sh $X_TAG_NAME | xargs)
                  requires_build="no"
                  allow_release_updates="no"
                  if [ "$tag_exists" == "no" ]; then
                      requires_build="yes"
                  fi
                  if [ "$FORCE_BUILD" == "true" ]; then
                      requires_build="yes"
                      allow_release_updates="yes"
                  fi
                  echo "X_TAG_EXISTS=${tag_exists}" >> $GITHUB_ENV
                  echo "X_REQUIRES_BUILD=${requires_build}" >> $GITHUB_ENV
                  echo "X_REQUIRES_BUILD=${requires_build}" >> $GITHUB_ENV
                  echo "X_ALLOW_UPDATES=${allow_release_updates}" >> $GITHUB_ENV
              env:
                  FORCE_BUILD: ${{ inputs.force }}

            - name: 🔨 Build executables
              run: ./build.sh $X_APP_VERSION
              if: ${{ env.X_REQUIRES_BUILD == 'yes' }}

            - name: 🚀 Upload executables
              uses: ncipollo/release-action@v1
              if: ${{ env.X_REQUIRES_BUILD == 'yes' }}
              with:
                  tag: ${{ env.X_TAG_NAME }}
                  artifacts: "dist/*"
                  generateReleaseNotes: false
                  draft: false
                  artifactErrorsFailBuild: true
                  allowUpdates: ${{ env.X_ALLOW_UPDATES == 'yes' }}
                  replacesArtifacts: ${{ env.X_ALLOW_UPDATES == 'yes' }}
                  makeLatest: true
